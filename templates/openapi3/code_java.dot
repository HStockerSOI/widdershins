//imports (you will need javax.json and org.apache.httpcomponents)
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.*;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.*;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import javax.json.*;
import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;

{{ data.methodCamel = data.method.verb.charAt(0).toUpperCase() + data.method.verb.slice(1); }}

String url = "{{=data.url + '?'}}";
{{?data.requiredParameters != 0}}
List<NameValuePair> params = new ArrayList<NameValuePair>();
{{~ data.requiredParameters :p:index}}params.add(new BasicNameValuePair("{{=p.name}}", "{{=p.exampleValues.json.replace(/'/g,"")}}"));{{~}}
url += URLEncodedUtils.format(params, "UTF-8");
{{?}}

//setup HTTP Auth
CredentialsProvider provider = new BasicCredentialsProvider();
UsernamePasswordCredentials credentials = new UsernamePasswordCredentials("username", "password");
provider.setCredentials(AuthScope.ANY, credentials);

HttpClient client = HttpClientBuilder.create().setDefaultCredentialsProvider(provider).build();

{{? data.method.verb == "post"}}
JsonArray body = Json.createArrayBuilder()
    .add(Json.createObjectBuilder()
        .add("provider", Json.createObjectBuilder()
            .add("first_name", "")
            .add("middle_name", "")
            .add("last_name", "")
            .add("name_suffix", "")
            .add("gender", "")
            .add("address1", "")
            .add("address2", "")
            .add("city", "")
            .add("state", "")
            .add("zip", "")
            .add("zip_extn", "")
            .add("phone", "")
            .add("fax", "")
            .add("email", "")
            .add("practice_state", "")
            .add("birthdate", "")
            .add("ssn", "")
            .add("short_ssn", "")
            .add("dea", "")
            .add("upin", "")
            .add("type", "")
            .add("tax_id", "")
            .add("npi", "")
            .add("license_state", "")
            .add("license_number", ""))
        .add("caqh_provider_id", "")
        .add("po_provider_id", "")
        .add("last_recredential_date", "")
        .add("next_recredential_date", "")
        .add("delegation_flag", "")
        .add("application_type", "")
        .add("affiliation_flag", "")
        .add("organization_id", "")
        .add("region_id", ""))
    .build();

try
{
    HttpPost request = new HttpPost(url);
    StringEntity bodyParams = new StringEntity(body.toString());
    request.addHeader("content-type", "application/json");
    request.setEntity(bodyParams);
    HttpResponse response = client.execute(request);

    HttpEntity entity = response.getEntity();
    String responseString = EntityUtils.toString(entity);
    JsonReader jsonReader = Json.createReader(new StringReader(responseString));
    JsonObject responseJson = jsonReader.readObject();
    jsonReader.close();

} catch (Exception ex)
{
    //handle errors here
}
{{?? data.method.verb == "get"}}
try
{
	    HttpGet request = new HttpGet(url);
	    HttpResponse response = client.execute(request);

	    HttpEntity entity = response.getEntity();
    	String responseString = EntityUtils.toString(entity);
    	JsonReader jsonReader = Json.createReader(new StringReader(responseString));
    	JsonObject responseJson = jsonReader.readObject();
    	jsonReader.close();

} catch (Exception ex)
{
	    //handle errors here
}
{{?? data.method.verb == "put"}}

JsonArray body = Json.createArrayBuilder()
    .add(Json.createObjectBuilder()
        .add("organization_id", "")
        .add("caqh_provider_id", "")
        .add("po_provider_id", "")
        .add("last_recredential_date", "")
        .add("next_recredential_date", "")
        .add("delegation_flag", "")
        .add("application_type", "")
        .add("affiliation_flag", ""))
    .build();

try
{
    HttpPut request = new HttpPut(url);
    StringEntity bodyParams = new StringEntity(body.toString());
    request.addHeader("content-type", "application/json");
    request.setEntity(bodyParams);
    HttpResponse response = client.execute(request);

    HttpEntity entity = response.getEntity();
    String responseString = EntityUtils.toString(entity);
    JsonReader jsonReader = Json.createReader(new StringReader(responseString));
    JsonObject responseJson = jsonReader.readObject();
    jsonReader.close();

} catch (Exception ex)
{
    //handle errors here
}
{{?}}

{{##def.buildJavaJson = function(jsonObj, lvl = 1)
{
    var lvlString = "";
    for (var prop in jsonObj)
    {   
        if (jsonObj.hasOwnProperty(prop))
        {
            if (jsonObj[prop] && typeof jsonObj[prop] == "object" && !Array.isArray(jsonObj[prop]))
            {
                //add parent property
                lvlString += ".add(\"" + prop + "\", Json.createObjectBuilder()\n";
                //traverse children
                lvlString += buildJavaJson(jsonObj[prop]);
                lvlString += ")\n";
            } else if (jsonObj[prop] && typeof jsonObj[prop] == "object" && Array.isArray(jsonObj[prop])) {
                lvlString += ".add(\"" + prop + "\", Json.createArrayBuilder()\n";
                for (var i in jsonObj[prop])
                {
                    if (typeof jsonObj[prop][i] == "object") {
                        lvlString += ".add(Json.createObjectBuilder()\n";
                        lvlString += buildJavaJson(jsonObj[prop][i]);
                        lvlString += ")\n";
                    } else
                        lvlString += ".add(\"" + jsonObj[prop][i] + "\")";
                }
                lvlString += ")\n";
            } else {
                //no children
                lvlString += ".add(\"" + prop + "\", \"\")";
                lvlString += "\n";
            }
        }
    }
    return lvlString;
}
#}}

{{##def.getJavaJson = function(jsonObj)
{
    return "JsonArray body = Json.createArrayBuilder().add(Json.createObjectBuilder()\n" + buildJavaJson(jsonObj) + ")\n.build();";
}
#}}