//includes
using System;
using System.Text;
using System.Web;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

{{ data.methodCamel = data.method.verb.charAt(0).toUpperCase() + data.method.verb.slice(1); }}
//HTTPClient should be instantiated once and re-used in your application
HttpClient client = new HttpClient();

//base url
string url = "{{=data.url + '?'}}";

{{?data.requiredParameters != 0}}
//setup query parameters
var queryString = HttpUtility.ParseQueryString(string.Empty);
{{~ data.requiredParameters :p:index}}queryString["{{=p.name}}"] = "{{=p.exampleValues.json.replace(/'/g,"")}}";{{~}}
//add parameters to base url
url += queryString.ToString();
{{?}}
//set up HTTP auth (replace username/password with yours)
var byteArray = Encoding.ASCII.GetBytes("username:password");
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));

{{? data.method.verb == "post"}}
/* Body JSON Scheme
{{=data.bodyParameter.exampleValues.json}}
*/
//Build JSON body (match above schema)
//Refer to Anatomy of a REST Call/Request Body to see code on composing a specific JSON structure in C#.

JObject body = new JObject(
new JProperty("property_1", new JObject(
    new JProperty("subproperty_1", ""),
    ...
    new JProperty("subproperty_n", ""))),
new JProperty("property_2", ""),
...
new JProperty("property_n", ""));
//Body is taken as an array, even with only one element
JArray bodyArray = new JArray(body);
var content = new StringContent(bodyArray.ToString(), Encoding.UTF8, "application/json");
content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

//Send the POST Request
var result = client.{{=data.methodCamel}}Async(url, content).Result;

{{?? data.method.verb == "get"}}
//Send the GET Request
var result = client.{{=data.methodCamel}}Async(url).Result;

{{?}}

//get the response message and parse it
string resultTxt = result.Content.ReadAsStringAsync().Result;
dynamic responseObj = JsonConvert.DeserializeObject<dynamic>(resultTxt);
Console.WriteLine(responseObj.ToString());
