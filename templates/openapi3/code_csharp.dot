//includes
using System;
using System.Text;
using System.Web;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

{{ data.methodCamel = data.method.verb.charAt(0).toUpperCase() + data.method.verb.slice(1); }}
//HTTPClient should be instantiated once and re-used in your application
HttpClient client = new HttpClient();

//base url
string url = "{{=data.url + '?'}}";

{{?data.requiredParameters != 0}}
//setup query parameters
var queryString = HttpUtility.ParseQueryString(string.Empty);
{{~ data.requiredParameters :p:index}}queryString["{{=p.name}}"] = "{{=p.exampleValues.json.replace(/'/g,"")}}";{{~}}
//add parameters to base url
url += queryString.ToString();
{{?}}
//set up HTTP auth (replace username/password with yours)
var byteArray = Encoding.ASCII.GetBytes("username:password");
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));

{{? data.method.verb == "post"}}

JObject body = new JObject(
new JProperty("provider", new JObject(
    new JProperty("first_name", ""),
    new JProperty("middle_name", ""),
    new JProperty("last_name", ""),
    new JProperty("name_suffix", ""),
    new JProperty("gender", ""),
    new JProperty("address1", ""),
    new JProperty("address2", ""),
    new JProperty("city", ""),
    new JProperty("state", ""),
    new JProperty("zip", ""),
    new JProperty("zip_extn", ""),
    new JProperty("phone", ""),
    new JProperty("fax", ""),
    new JProperty("email", ""),
    new JProperty("practice_state", ""),
    new JProperty("birthdate", ""),
    new JProperty("ssn", ""),
    new JProperty("short_ssn", ""),
    new JProperty("dea", ""),
    new JProperty("upin", ""),
    new JProperty("type", ""),
    new JProperty("tax_id", ""),
    new JProperty("npi", ""),
    new JProperty("license_state", ""),
    new JProperty("license_number", ""))),
new JProperty("caqh_provider_id", ""),
new JProperty("po_provider_id", ""),
new JProperty("last_recredential_date", ""),
new JProperty("next_recredential_date", ""),
new JProperty("delegation_flag", ""),
new JProperty("application_type", ""),
new JProperty("affiliation_flag", ""),
new JProperty("organization_id", ""),
new JProperty("region_id", ""));

//Body is taken as an array, even with only one element
JArray bodyArray = new JArray(body);
var content = new StringContent(bodyArray.ToString(), Encoding.UTF8, "application/json");
content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

//Send the POST Request
var result = client.{{=data.methodCamel}}Async(url, content).Result;

{{?? data.method.verb == "get"}}
//Send the GET Request
var result = client.{{=data.methodCamel}}Async(url).Result;

{{?? data.method.verb == "put"}}
JObject body = new JObject(
    new JProperty("organization_id", ""),
    new JProperty("caqh_provider_id", ""),
    new JProperty("po_provider_id", ""),
    new JProperty("last_recredential_date", ""),
    new JProperty("next_recredential_date", ""),
    new JProperty("delegation_flag", ""),
    new JProperty("application_type", ""),
    new JProperty("affiliation_flag", ""));

//Body is taken as an array, even with only one element
JArray bodyArray = new JArray(body);
var content = new StringContent(bodyArray.ToString(), Encoding.UTF8, "application/json");
content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

//Send the PUT Request
var result = client.PutAsync(url, content).Result;
{{?}}

//get the response message and parse it
string resultTxt = result.Content.ReadAsStringAsync().Result;
dynamic responseObj = JsonConvert.DeserializeObject<dynamic>(resultTxt);
Console.WriteLine(responseObj.ToString());


{{##def.buildCSharpJson = function(jsonObj)
{
    var lvlString = "";
    for (var prop in jsonObj)
    {   
        if (jsonObj.hasOwnProperty(prop))
        {
            if (jsonObj[prop] && typeof jsonObj[prop] == "object" && !Array.isArray(jsonObj[prop]))
            {
                //add parent property
                lvlString += "new JProperty(\"" + prop + "\", new JObject(\n";
                //traverse children
                lvlString += buildCSharpJson(jsonObj[prop]);
                lvlString += ")),\n";
            } else if (jsonObj[prop] && typeof jsonObj[prop] == "object" && Array.isArray(jsonObj[prop])) {
            	lvlString += "new JProperty(\"" + prop + "\", new JArray(\n";
            	for (var i in jsonObj[prop])
            	{
            		if (typeof jsonObj[prop][i] == "object"){
            			lvlString += "new JObject(\n";
            			lvlString += buildCSharpJson(jsonObj[prop][i]);
            			lvlString += ")";
            		}
            		else
            			lvlString += "\"" + jsonObj[prop][i] + "\"";
            		//check for needed comma
            		if (jsonObj[prop].length - 1 != i)
            			lvlString += ",";
            		lvlString += "\n";
            	}
            	lvlString += "))";
            	//check if this is the last propery of this level (to see if comma is needed)
            	var keys = Object.keys(jsonObj);
            	if (keys.indexOf(prop) != keys.length - 1)
            		lvlString += ",";
            	lvlString += "\n";
            } else {
                //no children
                lvlString += "new JProperty(\"" + prop + "\", \"\")";
                //last property does not need comma
                var keys = Object.keys(jsonObj);
                if (keys.indexOf(prop) != keys.length - 1)
                {
                	lvlString += ",";
                }
                lvlString += "\n";
            }
        }
    }
    return lvlString;
}
#}}

{{##def.getCSharpJson = function(jsonObj)
{
    return "JObject body = new JObject(\n" + def.buildCSharpJson(jsonObj) + ");";
}

#}}
