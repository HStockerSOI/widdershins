{{ data.methodUpper = data.method.verb.toUpperCase(); }}
{{ data.url = data.utils.slashes(data.baseUrl + data.method.path); }}
{{ data.parameters = data.operation.parameters; }}
{{ data.enums = []; }}
{{ data.utils.fakeProdCons(data); }}
{{ data.utils.fakeBodyParameter(data); }}
{{ data.utils.mergePathParameters(data); }}
{{ data.utils.getParameters(data); }}

<h2 id="{{=data.title_prefix+data.method.path.replace(/\//g,"-")+data.methodUpper}}-getting-started">Getting Started</h2>

```python
from requests import {{=data.method.verb}}
{{?data.bodyParameter.exampleValues.json}}from json import dumps
{{?}}
url = "{{=data.url}}"
```

``` csharp
//includes
using System;
using System.Text;
using System.Web;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;


//base url
string url = "{{=data.url + '?'}}";
```
```java
//imports (you will need javax.json and org.apache.httpcomponents)
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.*;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.*;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import javax.json.*;
import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;

//base url
String url = "{{=data.url + '?'}}";
```
{{? data.operation.description}}{{= data.operation.description.split("<introduction>")[1].split("</introduction>")[0] }}{{?}}

| Method | URL |
|---|---|
|{{=data.methodUpper }} | {{=data.url }} |


<h2 id="{{=data.title_prefix+data.method.path.replace(/\//g,"-")+data.methodUpper}}-staging-data">Staging The Data</h2>

> Create parameters object

  If you are storing this data in a database and are unsure about how best to retrieve and parse it, please refer to the [data loading and parsing](#loading-and-parsing-data) section.

```python
{{~ data.requiredParameters :p:index}}{{=p.name}} = {{=p.exampleValues.json}}
{{~}}

params = {
{{~ data.requiredParameters :p:index}}  "{{=p.name}}": {{=p.name}}{{? data.requiredParameters.length-1 != index }},{{?}}
{{~}}}
```

```csharp
{{?data.requiredParameters != 0}}
//setup query parameters
var queryString = HttpUtility.ParseQueryString(string.Empty);
{{~ data.requiredParameters :p:index}}queryString["{{=p.name}}"] = "{{=p.exampleValues.json.replace(/'/g,"")}}{{~}}";
//add parameters to base url
url += queryString.ToString();
{{??}}
//This request does not require URL parameters
{{?}}
```

```java
{{?data.requiredParameters != 0}}
List<NameValuePair> params = new ArrayList<NameValuePair>();
{{~ data.requiredParameters :p:index}}params.add(new BasicNameValuePair("{{=p.name}}", "{{=p.exampleValues.json.replace(/'/g,"")}}"));{{~}}
url += URLEncodedUtils.format(params, "UTF-8");
{{??}}
//This request does not require URL Parameters
{{?}}
```
<h3 id="{{=data.title_prefix.replace(/\//g,"-")+data.method.path.replace(/\//g,"-")+data.methodUpper}}-staging-data-parameter">Parameters</h3>

{{~ data.parameters :p:pindex}}{{?p.in == "query"}}{{?p.description}}  {{=p.description}}{{?}}{{?}}{{~}}  The data should be passed in to the [parameters](#query-parameters) of the request.

{{?data.bodyParameter.exampleValues.json}}
<h3 id="{{=data.title_prefix+data.method.path.replace(/\//g,"-")+data.methodUpper}}-staging-data-body">Body</h3>

{{~ data.parameters :p:pindex}}{{?p.in == "body"}}{{?p.description}}  {{=p.description}}{{?}}{{?}}{{~}}    The data should be passed in to the [request body](#request-body) of the request.{{?}}

<h2 id="{{=data.title_prefix+data.method.path.replace(/\//g,"-")+data.methodUpper}}-api-definition"> {{=data.methodUpper}} {{=data.method.path}}</h2>

{{? data.operation.description}}{{= data.operation.description.split("<definition>")[1].split("</definition>")[0] }}{{?}}

<h2 id="{{=data.title_prefix+data.method.path.replace(/\//g,"-")+data.methodUpper}}-making-request">Making The Request</h2>

{{? data.options.codeSamples || data.operation["x-code-samples"] }}
> Full API Request

{{= data.utils.getCodeSamples(data) }}
{{?}}

`{{= data.methodUpper}} {{=data.method.path}}`


{{? data.parameters && data.parameters.length }}
{{#def.parameters}}
{{?}}

<h2 id="{{=data.title_prefix+data.method.path.replace(/\//g,"-")+data.methodUpper}}-responses">Responses</h2>

{{#def.responses}}

{{#def.callbacks}}

{{ data.security = data.operation.security ? data.operation.security : data.api.security; }}
{{? data.security && data.security.length }}
{{#def.authentication}}
{{??}}
{{#def.authentication_none}}
{{?}}

<h2 id="{{=data.title_prefix+data.method.path.replace(/\//g,"-")+data.methodUpper}}-next-step">Next Steps</h2>

> Parsing the response

```python
{{~ data.responses :r}}
{{~Object.keys(data.api.components.schemas[r.schema.split('[')[1].split(']')[0]]['properties']) :p}}{{=p}} = ""
{{~}}
if(response.status_Code == {{=r.status}}):
	{{~Object.keys(data.api.components.schemas[r.schema.split('[')[1].split(']')[0]]['properties']) :p}}{{=p}} = response.json()["{{=p}}"]
	{{~}}
{{~}}
```

```csharp
{{~ data.responses :r}}
{{~Object.keys(data.api.components.schemas[r.schema.split('[')[1].split(']')[0]]['properties']) :p}}string {{=p}} = "";
{{~}}
if ((int)result.StatusCode == {{=r.status}})
{
	{{~Object.keys(data.api.components.schemas[r.schema.split('[')[1].split(']')[0]]['properties']) :p}}{{=p}} = responseObj.{{=p}};
	{{~}}
}

{{~}}
```
```java
{{~ data.responses :r}}
{{~Object.keys(data.api.components.schemas[r.schema.split('[')[1].split(']')[0]]['properties']) :p}}String {{=p}} = "";
{{~}}
if (response.getStatusLine().getStatusCode() == {{=r.status}})
{
	{{~Object.keys(data.api.components.schemas[r.schema.split('[')[1].split(']')[0]]['properties']) :p}}{{=p}} = responseJson.getString("{{=p}}");
	{{~}}
}
{{~}}
```
{{? data.operation.description}}{{= data.operation.description.split("<nextSteps>")[1].split("</nextSteps>")[0] }}{{?}}